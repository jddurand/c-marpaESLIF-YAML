<reserved event name>               ~ ':symbol'
whitespace                          ~ [\s]+
<perl comment>                      ~ /#[^\n]*(?:\n|\z)/ # \z is to match a comment at the very end without a vertical space
<cplusplus comment>                 ~ /\/\/[^\n]*(?:\n|\z)/ # Same remark
<c comment>                         ~ /\/\*(?:[^\*]+|\*(?!\/))*\*\//
<op declare any grammar>            ~ /:\[\d+\]:=/
<op declare top grammar>            ~ ':[0]:=' | '::=' # ::= is an alias for the grammar at level 0 (top grammar)
<op declare lex grammar>            ~ ':[1]:=' | '~'   #   ~ is an alias for the grammar at level 1 (lex grammar)
<op loosen>                         ~ '||'
<op equal priority>                 ~ '|'
<before or after>                   ~ 'before' | 'after'
<signed integer>                    ~ <integer> | <sign> <integer>
<sign>                              ~ [+-]
<integer>                           ~ [\d]+  # By default, a character class never match character with code point greater than 127. So [\d] is [0-9]
true                                ~ '1'
boolean                             ~ [01]
<word character>                    ~ [\w]   # \w is  [a-zA-Z0-9_]
<one or more word characters>       ~ <word character>+
<zero or more word characters>      ~ <word character>*
<Perl identifier>                   ~ <word character>+
<ascii graph name>                  ~ /[[:graph:]]+/
<bare name>                         ~ <word character>+
<standard name>                     ~ [a-zA-Z] <zero or more word characters>
<bracketed name>                    ~ '<' <bracketed name string> '>'
<bracketed name string>             ~ [\s\w]+
<quoted string>                     ~ /(?:(?|(?:\')(?:[^\\\']*(?:\\.[^\\\']*)*)(?:\')|(?:\")(?:[^\\\"]*(?:\\.[^\\\"]*)*)(?:\")|(?:\{)(?:[^\\\}]*(?:\\.[^\\\}]*)*)(?:\})))/s /* s modifier to match newline - we never match "" */ <character class modifiers>
<quoted name>                       ~ /(?:(?|(?:\')(?:[^\\\']*(?:\\.[^\\\']*)*)(?:\')|(?:\")(?:[^\\\"]*(?:\\.[^\\\"]*)*)(?:\")|(?:\{)(?:[^\\\}]*(?:\\.[^\\\}]*)*)(?:\})))/s /* s modifier to match newline - we never match "" */
<character class regexp>            ~ /\[(?:[^\\]]*(?:\.[^\\]]*)*)\]/
<character class>                   ~ <character class regexp> <character class modifiers>
<character class modifier>          ~ /:[eijmnsxDJUuaN]/
<character class modifier>          ~ ':ic'   # :ic is added for Marpa::R2 compatibility and is meaningless
<character class modifiers>         ~ <character class modifier>*

<regular expression>                ~ /\/[^\\/]*(?:\.[^\\/]*)*\// <regular expression modifiers>
<regular expression modifiers>      ~ [eijmnsxDJUuaN]*
